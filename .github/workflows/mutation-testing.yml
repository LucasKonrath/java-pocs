name: Mutation Testing with PIT

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'pit-poc/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'pit-poc/**'
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write
  statuses: write

jobs:
  mutation-testing:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: pit-poc

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('pit-poc/**/*.gradle*', 'pit-poc/**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run unit tests
      run: ./gradlew test

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: JUnit Test Results
        path: pit-poc/build/test-results/test/*.xml
        reporter: java-junit

    - name: Run PIT mutation testing
      run: ./gradlew pitest

    - name: Generate mutation testing summary
      if: always()
      run: |
        echo "# Mutation Testing Results üß¨" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Extract key metrics from the pitest output if available
        if [ -f "build/reports/pitest/mutations.xml" ]; then
          # Parse XML to extract mutation statistics
          TOTAL_MUTATIONS=$(grep -o '<mutation ' build/reports/pitest/mutations.xml | wc -l)
          KILLED_MUTATIONS=$(grep -o 'status="KILLED"' build/reports/pitest/mutations.xml | wc -l)
          SURVIVED_MUTATIONS=$(grep -o 'status="SURVIVED"' build/reports/pitest/mutations.xml | wc -l)
          
          if [ "$TOTAL_MUTATIONS" -gt 0 ]; then
            MUTATION_SCORE=$((KILLED_MUTATIONS * 100 / TOTAL_MUTATIONS))
            echo "## üìä Mutation Score: ${MUTATION_SCORE}%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Count | Percentage |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|------------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total Mutations | $TOTAL_MUTATIONS | 100% |" >> $GITHUB_STEP_SUMMARY
            echo "| Killed Mutations | $KILLED_MUTATIONS | $((KILLED_MUTATIONS * 100 / TOTAL_MUTATIONS))% |" >> $GITHUB_STEP_SUMMARY
            echo "| Survived Mutations | $SURVIVED_MUTATIONS | $((SURVIVED_MUTATIONS * 100 / TOTAL_MUTATIONS))% |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Add interpretation
            if [ "$MUTATION_SCORE" -ge 80 ]; then
              echo "‚úÖ **Excellent test quality!** Your tests are very effective at detecting code changes." >> $GITHUB_STEP_SUMMARY
            elif [ "$MUTATION_SCORE" -ge 60 ]; then
              echo "‚ö†Ô∏è **Good test quality** but there's room for improvement." >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå **Test quality needs improvement.** Consider adding more comprehensive tests." >> $GITHUB_STEP_SUMMARY
            fi
          fi
        else
          echo "‚ùå Mutation testing report not found. Check the build logs for errors." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìÅ **Detailed reports are available in the build artifacts.**" >> $GITHUB_STEP_SUMMARY

    - name: Upload PIT reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pit-mutation-testing-reports
        path: |
          pit-poc/build/reports/pitest/
          pit-poc/build/reports/tests/
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: pit-poc/build/test-results/
        retention-days: 30

    - name: Comment PR with mutation results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let comment = '## üß¨ Mutation Testing Results\n\n';
          
          try {
            // Check if mutation report exists
            const reportPath = 'pit-poc/build/reports/pitest/mutations.xml';
            if (fs.existsSync(reportPath)) {
              const reportContent = fs.readFileSync(reportPath, 'utf8');
              
              // Count mutations
              const totalMutations = (reportContent.match(/<mutation /g) || []).length;
              const killedMutations = (reportContent.match(/status="KILLED"/g) || []).length;
              const survivedMutations = (reportContent.match(/status="SURVIVED"/g) || []).length;
              
              if (totalMutations > 0) {
                const mutationScore = Math.round((killedMutations / totalMutations) * 100);
                
                comment += `### üìä Mutation Score: ${mutationScore}%\n\n`;
                comment += '| Metric | Count | Percentage |\n';
                comment += '|--------|-------|------------|\n';
                comment += `| Total Mutations | ${totalMutations} | 100% |\n`;
                comment += `| Killed Mutations | ${killedMutations} | ${Math.round((killedMutations/totalMutations)*100)}% |\n`;
                comment += `| Survived Mutations | ${survivedMutations} | ${Math.round((survivedMutations/totalMutations)*100)}% |\n\n`;
                
                // Add quality assessment
                if (mutationScore >= 80) {
                  comment += '‚úÖ **Excellent test quality!** Your tests are very effective at detecting code changes.\n';
                } else if (mutationScore >= 60) {
                  comment += '‚ö†Ô∏è **Good test quality** but there\'s room for improvement.\n';
                } else {
                  comment += '‚ùå **Test quality needs improvement.** Consider adding more comprehensive tests.\n';
                }
                
                comment += '\nüìÅ Detailed HTML reports are available in the build artifacts.\n';
              }
            } else {
              comment += '‚ùå Mutation testing report not found. Check the build logs for errors.\n';
            }
          } catch (error) {
            comment += `‚ùå Error processing mutation testing results: ${error.message}\n`;
          }
          
          // Post comment on PR
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Fail job if mutation score is too low
      if: always()
      run: |
        # Set minimum mutation score threshold (e.g., 70%)
        MIN_MUTATION_SCORE=70
        
        if [ -f "build/reports/pitest/mutations.xml" ]; then
          TOTAL_MUTATIONS=$(grep -o '<mutation ' build/reports/pitest/mutations.xml | wc -l)
          KILLED_MUTATIONS=$(grep -o 'status="KILLED"' build/reports/pitest/mutations.xml | wc -l)
          
          if [ "$TOTAL_MUTATIONS" -gt 0 ]; then
            MUTATION_SCORE=$((KILLED_MUTATIONS * 100 / TOTAL_MUTATIONS))
            echo "Mutation Score: ${MUTATION_SCORE}%"
            echo "Minimum Required: ${MIN_MUTATION_SCORE}%"
            
            if [ "$MUTATION_SCORE" -lt "$MIN_MUTATION_SCORE" ]; then
              echo "‚ùå Mutation score ${MUTATION_SCORE}% is below the required threshold of ${MIN_MUTATION_SCORE}%"
              exit 1
            else
              echo "‚úÖ Mutation score ${MUTATION_SCORE}% meets the required threshold of ${MIN_MUTATION_SCORE}%"
            fi
          fi
        else
          echo "‚ùå Cannot determine mutation score - mutation report not found"
          exit 1
        fi
